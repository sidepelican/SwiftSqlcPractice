// Code generated by sqlc using sqlc-gen-from-template; DO NOT EDIT.
// Template: query_template.swift.tmpl

import Foundation
import SQLiteNIO

enum Query {

  struct GetTracksByAlbum: SqlcQueryMany {
    static var sql: String {
      """
      SELECT t.TrackId, t.Name, t.Milliseconds
      FROM tracks AS t
      WHERE t.AlbumId = ?1
      ORDER BY t.TrackId
      """
    }
    let sql: String
    let binds: [SQLiteData]
    init(album_id: Int) {
      var builder = SqlcRawQueryBuilder(sql: Self.sql)
      builder.bind(value: album_id, atParamIndex: 1)
      (sql, binds) = builder.build()
    }
    struct Row: DecodableFromSQLiteRow, Sendable {
      var trackid: Int
      var name: String
      var milliseconds: Int
      static func decode(from row: SQLiteRow) throws -> Row {
        let columns = row.columns
        return Row(
          trackid: try .decode(from: columns[0]),
          name: try .decode(from: columns[1]),
          milliseconds: try .decode(from: columns[2])
        )
      }
    }
  }

  struct GetTracksWithAlbumTitle: SqlcQueryMany {
    static var sql: String {
      """
      SELECT t.TrackId, t.Name, a.Title
      FROM tracks AS t
      JOIN albums AS a ON t.AlbumId = a.AlbumId
      ORDER BY t.TrackId
      """
    }
    let sql: String
    let binds: [SQLiteData]
    init() {
      var builder = SqlcRawQueryBuilder(sql: Self.sql)
      (sql, binds) = builder.build()
    }
    struct Row: DecodableFromSQLiteRow, Sendable {
      var trackid: Int
      var name: String
      var title: String
      static func decode(from row: SQLiteRow) throws -> Row {
        let columns = row.columns
        return Row(
          trackid: try .decode(from: columns[0]),
          name: try .decode(from: columns[1]),
          title: try .decode(from: columns[2])
        )
      }
    }
  }

  struct GetArtistByID: SqlcQueryOne {
    static var sql: String {
      """
      SELECT ArtistId, Name
      FROM artists
      WHERE ArtistId = ?1
      """
    }
    let sql: String
    let binds: [SQLiteData]
    init(id: Int) {
      var builder = SqlcRawQueryBuilder(sql: Self.sql)
      builder.bind(value: id, atParamIndex: 1)
      (sql, binds) = builder.build()
    }
    struct Row: DecodableFromSQLiteRow, Sendable {
      var artistid: Int
      var name: String
      static func decode(from row: SQLiteRow) throws -> Row {
        let columns = row.columns
        return Row(
          artistid: try .decode(from: columns[0]),
          name: try .decode(from: columns[1])
        )
      }
    }
  }

  struct GetTracksByIDs: SqlcQueryMany {
    static var sql: String {
      """
      SELECT TrackId, Name
      FROM tracks
      WHERE TrackId IN (/*SLICE:track_ids*/?)
      ORDER BY TrackId
      """
    }
    let sql: String
    let binds: [SQLiteData]
    init(track_ids: [Int]) {
      var builder = SqlcRawQueryBuilder(sql: Self.sql)
      builder.bind(values: track_ids, atSliceName: "track_ids")
      (sql, binds) = builder.build()
    }
    struct Row: DecodableFromSQLiteRow, Sendable {
      var trackid: Int
      var name: String
      static func decode(from row: SQLiteRow) throws -> Row {
        let columns = row.columns
        return Row(
          trackid: try .decode(from: columns[0]),
          name: try .decode(from: columns[1])
        )
      }
    }
  }

  struct GetTracksByAlbumIDs: SqlcQueryMany {
    static var sql: String {
      """
      SELECT t.TrackId, t.Name, a.Title
      FROM tracks AS t
      JOIN albums AS a ON t.AlbumId = a.AlbumId
      WHERE a.AlbumId IN (/*SLICE:album_ids*/?)
      ORDER BY t.TrackId
      LIMIT ?2
      """
    }
    let sql: String
    let binds: [SQLiteData]
    init(album_ids: [Int], limit: Int) {
      var builder = SqlcRawQueryBuilder(sql: Self.sql)
      builder.bind(values: album_ids, atSliceName: "album_ids")
      builder.bind(value: limit, atParamIndex: 2)
      (sql, binds) = builder.build()
    }
    struct Row: DecodableFromSQLiteRow, Sendable {
      var trackid: Int
      var name: String
      var title: String
      static func decode(from row: SQLiteRow) throws -> Row {
        let columns = row.columns
        return Row(
          trackid: try .decode(from: columns[0]),
          name: try .decode(from: columns[1]),
          title: try .decode(from: columns[2])
        )
      }
    }
  }

  struct CreateArtist: SqlcQueryOne {
    static var sql: String {
      """
      INSERT INTO artists (Name)
      VALUES (?1)
      RETURNING ArtistId
      """
    }
    let sql: String
    let binds: [SQLiteData]
    init(name: String) {
      var builder = SqlcRawQueryBuilder(sql: Self.sql)
      builder.bind(value: name, atParamIndex: 1)
      (sql, binds) = builder.build()
    }
    struct Row: DecodableFromSQLiteRow, Sendable {
      var artistid: Int
      static func decode(from row: SQLiteRow) throws -> Row {
        let columns = row.columns
        return Row(
          artistid: try .decode(from: columns[0])
        )
      }
    }
  }

  struct DeleteArtist: SqlcQueryExec {
    static var sql: String {
      """
      DELETE FROM artists
      WHERE ArtistId = ?1
      """
    }
    let sql: String
    let binds: [SQLiteData]
    init(id: Int) {
      var builder = SqlcRawQueryBuilder(sql: Self.sql)
      builder.bind(value: id, atParamIndex: 1)
      (sql, binds) = builder.build()
    }
  }
}
