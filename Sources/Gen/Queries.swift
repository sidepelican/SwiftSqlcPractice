// Code generated by sqlc using sqlc-gen-from-template; DO NOT EDIT.
// Template: query_template.swift.tmpl

import Foundation
import SQLiteNIO

enum Query {

  struct GetTracksByAlbum: SqlcQueryMany {
    static var sql: String {
      """
      SELECT t.TrackId, t.Name, t.Milliseconds
      FROM tracks AS t
      WHERE t.AlbumId = ?1
      ORDER BY t.TrackId
      """
    }

    var binds: [SQLiteData] = []
    init(album_id: Int) {
      binds.bind(album_id)
    }

    struct Row: DecodableFromSQLiteRow, Sendable {
      var trackid: Int
      var name: String
      var milliseconds: Int
      static func decode(from row: SQLiteRow) throws -> Row {
        let columns = row.columns
        return Row(
          trackid: try .decode(from: columns[0]),
          name: try .decode(from: columns[1]),
          milliseconds: try .decode(from: columns[2])
        )
      }
    }
  }

  struct SearchTracksByName: SqlcQueryMany {
    static var sql: String {
      """
      SELECT TrackId, Name
      FROM tracks
      WHERE Name LIKE '%' || ?1 || '%'
      ORDER BY Name
      LIMIT ?2
      """
    }

    var binds: [SQLiteData] = []
    init(pattern: String?, limit: Int) {
      binds.bind(pattern)
      binds.bind(limit)
    }

    struct Row: DecodableFromSQLiteRow, Sendable {
      var trackid: Int
      var name: String
      static func decode(from row: SQLiteRow) throws -> Row {
        let columns = row.columns
        return Row(
          trackid: try .decode(from: columns[0]),
          name: try .decode(from: columns[1])
        )
      }
    }
  }

  struct GetAlbumsByArtist: SqlcQueryMany {
    static var sql: String {
      """
      SELECT a.AlbumId, a.Title
      FROM albums AS a
      WHERE a.ArtistId = ?1
      ORDER BY a.AlbumId
      """
    }

    var binds: [SQLiteData] = []
    init(artist_id: Int) {
      binds.bind(artist_id)
    }

    struct Row: DecodableFromSQLiteRow, Sendable {
      var albumid: Int
      var title: String
      static func decode(from row: SQLiteRow) throws -> Row {
        let columns = row.columns
        return Row(
          albumid: try .decode(from: columns[0]),
          title: try .decode(from: columns[1])
        )
      }
    }
  }

  struct GetArtistByID: SqlcQueryOne {
    static var sql: String {
      """
      SELECT ArtistId, Name
      FROM artists
      WHERE ArtistId = ?1
      """
    }

    var binds: [SQLiteData] = []
    init(id: Int) {
      binds.bind(id)
    }

    struct Row: DecodableFromSQLiteRow, Sendable {
      var artistid: Int
      var name: String
      static func decode(from row: SQLiteRow) throws -> Row {
        let columns = row.columns
        return Row(
          artistid: try .decode(from: columns[0]),
          name: try .decode(from: columns[1])
        )
      }
    }
  }

  struct CreateArtist: SqlcQueryOne {
    static var sql: String {
      """
      INSERT INTO artists (Name)
      VALUES (?1)
      RETURNING ArtistId
      """
    }

    var binds: [SQLiteData] = []
    init(name: String) {
      binds.bind(name)
    }

    struct Row: DecodableFromSQLiteRow, Sendable {
      var artistid: Int
      static func decode(from row: SQLiteRow) throws -> Row {
        let columns = row.columns
        return Row(
          artistid: try .decode(from: columns[0])
        )
      }
    }
  }

  struct DeleteArtist: SqlcQueryExec {
    static var sql: String {
      """
      DELETE FROM artists
      WHERE ArtistId = ?1
      """
    }

    var binds: [SQLiteData] = []
    init(id: Int) {
      binds.bind(id)
    }

    struct Row: DecodableFromSQLiteRow, Sendable {
      static func decode(from row: SQLiteRow) throws -> Row {
        return Row()
      }
    }
  }
}
