// Code generated by sqlc using sqlc-gen-from-template; DO NOT EDIT.
// Template: query_template.swift.tmpl

import Foundation
import SQLiteNIO

public enum Query {

  public struct GetTracksByAlbum: Sendable {
    public static var sql: String {
      """
      SELECT t.TrackId, t.Name, t.Milliseconds
      FROM tracks AS t
      WHERE t.AlbumId = ?1
      ORDER BY t.TrackId
      """
    }
    public var album_id: Int
    public init(album_id: Int) {
      self.album_id = album_id
    }

    public struct Row: Sendable {
      public var trackid: Int
      public var name: String
      public var milliseconds: Int
    }
    public func execute(on db: SQLiteConnection) async throws -> [Row] {
      var query = SqlcQueryBuilder(Self.sql)
      query.bind(album_id)
      let rows = try await db.execute(query)
      return try rows.map { row in
        let columns = row.columns
        return Row(
          trackid: try .decode(from: columns[0]),
          name: try .decode(from: columns[1]),
          milliseconds: try .decode(from: columns[2])
        )
      }
    }
  }

  public struct SearchTracksByName: Sendable {
    public static var sql: String {
      """
      SELECT TrackId, Name
      FROM tracks
      WHERE Name LIKE '%' || ?1 || '%'
      ORDER BY Name
      LIMIT ?2
      """
    }
    public var pattern: String?
    public var limit: Int
    public init(pattern: String?, limit: Int) {
      self.pattern = pattern
      self.limit = limit
    }

    public struct Row: Sendable {
      public var trackid: Int
      public var name: String
    }
    public func execute(on db: SQLiteConnection) async throws -> [Row] {
      var query = SqlcQueryBuilder(Self.sql)
      query.bind(pattern)
      query.bind(limit)
      let rows = try await db.execute(query)
      return try rows.map { row in
        let columns = row.columns
        return Row(
          trackid: try .decode(from: columns[0]),
          name: try .decode(from: columns[1])
        )
      }
    }
  }

  public struct GetAlbumsByArtist: Sendable {
    public static var sql: String {
      """
      SELECT a.AlbumId, a.Title
      FROM albums AS a
      WHERE a.ArtistId = ?1
      ORDER BY a.AlbumId
      """
    }
    public var artist_id: Int
    public init(artist_id: Int) {
      self.artist_id = artist_id
    }

    public struct Row: Sendable {
      public var albumid: Int
      public var title: String
    }
    public func execute(on db: SQLiteConnection) async throws -> [Row] {
      var query = SqlcQueryBuilder(Self.sql)
      query.bind(artist_id)
      let rows = try await db.execute(query)
      return try rows.map { row in
        let columns = row.columns
        return Row(
          albumid: try .decode(from: columns[0]),
          title: try .decode(from: columns[1])
        )
      }
    }
  }

  public struct GetArtistByID: Sendable {
    public static var sql: String {
      """
      SELECT ArtistId, Name
      FROM artists
      WHERE ArtistId = ?1
      """
    }
    public var id: Int
    public init(id: Int) {
      self.id = id
    }

    public struct Row: Sendable {
      public var artistid: Int
      public var name: String
    }
    public func execute(on db: SQLiteConnection) async throws -> Row? {
      var query = SqlcQueryBuilder(Self.sql)
      query.bind(id)
      if let row = try await db.execute(query).first {
        let columns = row.columns
        return Row(
          artistid: try .decode(from: columns[0]),
          name: try .decode(from: columns[1])
        )
      }
      return nil
    }
  }

  public struct CreateArtist: Sendable {
    public static var sql: String {
      """
      INSERT INTO artists (Name)
      VALUES (?1)
      """
    }
    public var name: String
    public init(name: String) {
      self.name = name
    }

    public struct Row: Sendable {
    }
    public func execute(on db: SQLiteConnection) async throws {
      var query = SqlcQueryBuilder(Self.sql)
      query.bind(name)
      _ = try await db.execute(query)
    }
  }

  public struct DeleteArtist: Sendable {
    public static var sql: String {
      """
      DELETE FROM artists
      WHERE ArtistId = ?1
      """
    }
    public var id: Int
    public init(id: Int) {
      self.id = id
    }

    public struct Row: Sendable {
    }
    public func execute(on db: SQLiteConnection) async throws {
      var query = SqlcQueryBuilder(Self.sql)
      query.bind(id)
      _ = try await db.execute(query)
    }
  }
}
