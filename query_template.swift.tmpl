// Code generated by sqlc using sqlc-gen-from-template; DO NOT EDIT.
// Template: query_template.swift.tmpl

import Foundation
import SQLiteNIO

public enum Query {
{{- range .Queries }}

  public enum {{ .Name }} {
    public static var name: String { "{{ .Name }}" }
    public static var cmd: String { "{{ .Cmd }}" }
    public static var sql: String { {{ printf "%q" .Text }} }

    public struct Input: Sendable {
    {{- range $i, $p := .Params }}
      public var p{{ $p.Number }}: {{- $t := $p.Column.Type.Name -}}{{ if or (eq $t "INTEGER") (eq $t "integer") }}Int{{ else if or (eq $t "REAL") (eq $t "real") }}Double{{ else if or (eq $t "TEXT") (eq $t "text") }}String{{ else if or (eq $t "BLOB") (eq $t "blob") }}Data{{ else }}String{{ end }}{{ if not $p.Column.NotNull }}?{{ end }}
    {{- end }}
      public init({{- range $i, $p := .Params }}{{ if $i }}, {{ end }}p{{ $p.Number }}: {{- $t := $p.Column.Type.Name -}}{{ if or (eq $t "INTEGER") (eq $t "integer") }}Int{{ else if or (eq $t "REAL") (eq $t "real") }}Double{{ else if or (eq $t "TEXT") (eq $t "text") }}String{{ else if or (eq $t "BLOB") (eq $t "blob") }}Data{{ else }}String{{ end }}{{ if not $p.Column.NotNull }}?{{ end }}{{- end }}) {
      {{- range $i, $p := .Params }}
        self.p{{ $p.Number }} = p{{ $p.Number }}
      {{- end }}
      }
    }

    public struct Row: Sendable {
    {{- range $i, $c := .Columns }}
      public var {{ $c.Name }}: {{- $t := $c.Type.Name -}}{{ if or (eq $t "INTEGER") (eq $t "integer") }}Int{{ else if or (eq $t "REAL") (eq $t "real") }}Double{{ else if or (eq $t "TEXT") (eq $t "text") }}String{{ else if or (eq $t "BLOB") (eq $t "blob") }}Data{{ else }}String{{ end }}{{ if not $c.NotNull }}?{{ end }}
    {{- end }}
    }

    // Convenience runner (matches SQLKit async API)
    {{- if eq .Cmd ":many" }}
    public static func execute(on db: SQLiteConnection, input: Input) async throws -> [Row] {
      var query = SqlcQueryBuilder(sql)
      {{- range $i, $p := .Params }}
      query.bind(input.p{{ $p.Number }})
      {{- end }}
      let rows = try await db.execute(query)
      var result: [Row] = []
      result.reserveCapacity(rows.count)
      for row in rows {
        let columns = row.columns
        result.append(Row(
        {{- range $i, $c := .Columns }}
          {{- if $i }}, {{ end -}}
          {{ $c.Name }}: try .decode(from: columns[{{ $i }}])
        {{- end }}
        ))
      }
      return result
    }
    {{- else if eq .Cmd ":one" }}
    public static func execute(on db: SQLiteConnection, input: Input) async throws -> Row? {
      var query = SqlcQueryBuilder(sql)
      {{- range $i, $p := .Params }}
      query.bind(input.p{{ $p.Number }})
      {{- end }}
      if let row = try await db.execute(query).first {
        let columns = row.columns
        return Row(
        {{- range $i, $c := .Columns }}
          {{- if $i }}, {{ end -}}
          {{ $c.Name }}: try .decode(from: columns[{{ $i }}])
        {{- end }}
        )
      }
      return nil
    }
    {{- else }}
    public static func execute(on db: SQLiteConnection, input: Input) async throws {
      var query = SqlcQueryBuilder(sql)
      {{- range $i, $p := .Params }}
      query.bind(input.p{{ $p.Number }})
      {{- end }}
      _ = try await db.execute(query)
    }
    {{- end }}
  }
{{- end }}
}
