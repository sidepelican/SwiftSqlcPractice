// Code generated by sqlc using sqlc-gen-from-template; DO NOT EDIT.
// Template: query_template.swift.tmpl

import Foundation
import SQLiteNIO

{{ define "SwiftType" -}}
  {{- $t := .Type.Name -}}
  {{- if or (eq $t "INTEGER") (eq $t "integer") -}}Int
  {{- else if or (eq $t "REAL") (eq $t "real") -}}Double
  {{- else if or (eq $t "TEXT") (eq $t "text") -}}String
  {{- else if or (eq $t "BLOB") (eq $t "blob") -}}Data
  {{- else -}}String
  {{- end -}}
  {{- if not .NotNull -}}?{{- end -}}
{{- end }}

enum Query {
{{- range .Queries }}

  struct {{ .Name }}: {{ if eq .Cmd ":many" }}SqlcQueryMany{{ else if eq .Cmd ":one" }}SqlcQueryOne{{ else }}SqlcQueryExec{{ end }} {
    static var sql: String { """
{{ .Text }}
""" }
    let sql: String
    let binds: [SQLiteData]
    init(
      {{- range $i, $p := .Params -}}
      {{- if $i }}, {{ end -}}
      {{ $p.Column.Name }}: {{ if $p.Column.IsSqlcSlice }}[{{ template "SwiftType" $p.Column }}]{{ else }}{{ template "SwiftType" $p.Column }}{{ end -}}
      {{- end -}}
    ) {
      var builder = SqlcRawQueryBuilder(sql: Self.sql)
      {{- range $i, $p := .Params -}}
      {{- if $p.Column.IsSqlcSlice }}
      builder.bind(values: {{ $p.Column.Name }}, atSliceName: "{{ $p.Column.Name }}")
      {{- else }}
      builder.bind(value: {{ $p.Column.Name }}, atParamIndex: {{ $p.Number }})
      {{- end }}
      {{- end }}
      (sql, binds) = builder.build()
    }

    {{- if or (eq .Cmd ":many") (eq .Cmd ":one") }}
    struct Row: DecodableFromSQLiteRow, Sendable {
      {{- range $i, $c := .Columns }}
      var {{ $c.Name }}: {{ template "SwiftType" $c }}
      {{- end }}
      static func decode(from row: SQLiteRow) throws -> Row {
        {{- if gt (len .Columns) 0 -}}
        let columns = row.columns
        {{- end }}
        return Row(
          {{- range $i, $c := .Columns -}}
          {{- if $i }},{{ end }}
          {{ $c.Name }}: try .decode(from: columns[{{ $i }}])
          {{- end }}
        )
      }
    }
    {{- end }}
  }
{{- end }}
}
