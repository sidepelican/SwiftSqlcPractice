// Code generated by sqlc using sqlc-gen-from-template; DO NOT EDIT.
// Template: query_template.swift.tmpl

import Foundation
import SQLiteNIO

enum Query {
{{- range .Queries }}

  struct {{ .Name }}: {{ if eq .Cmd ":many" }}SqlcQueryMany{{ else if eq .Cmd ":one" }}SqlcQueryOne{{ else }}SqlcQueryExec{{ end }} {
    static var sql: String { """
{{ .Text }}
""" }

    var binds: [SQLiteData] = []
    init({{- range $i, $p := .Params }}{{ if $i }}, {{ end }}{{ $p.Column.Name }}: {{- $t := $p.Column.Type.Name -}}{{ if or (eq $t "INTEGER") (eq $t "integer") }}Int{{ else if or (eq $t "REAL") (eq $t "real") }}Double{{ else if or (eq $t "TEXT") (eq $t "text") }}String{{ else if or (eq $t "BLOB") (eq $t "blob") }}Data{{ else }}String{{ end }}{{ if not $p.Column.NotNull }}?{{ end }}{{- end }}) {
      {{- range $i, $p := .Params }}
      binds.bind({{ $p.Column.Name }})
      {{- end }}
    }

    struct Row: DecodableFromSQLiteRow, Sendable {
    {{- range $i, $c := .Columns }}
      var {{ $c.Name }}: {{- $t := $c.Type.Name -}}{{ if or (eq $t "INTEGER") (eq $t "integer") }}Int{{ else if or (eq $t "REAL") (eq $t "real") }}Double{{ else if or (eq $t "TEXT") (eq $t "text") }}String{{ else if or (eq $t "BLOB") (eq $t "blob") }}Data{{ else }}String{{ end }}{{ if not $c.NotNull }}?{{ end }}
    {{- end }}
      static func decode(from row: SQLiteRow) throws -> Row {
        {{- if gt (len .Columns) 0 -}}
        let columns = row.columns
        {{- end }}
        return Row(
          {{- range $i, $c := .Columns }}
          {{- if $i }},
          {{ end -}}
          {{ $c.Name }}: try .decode(from: columns[{{ $i }}])
          {{- end }}
        )
      }
    }
  }
{{- end }}
}
